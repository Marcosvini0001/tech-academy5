const { test, expect } = require('@playwright/test');

test('should create a new user successfully', async ({ request }) => {
    const response = await request.post('/api/users', {
        data: {
            email: 'test@example.com',
            password: 'password123'
        }
    });
    expect(response.status()).toBe(201);
    const responseBody = await response.json();
    expect(responseBody).toHaveProperty('id');
});

test('should fail to create a user with duplicate email', async ({ request }) => {
    await request.post('/api/users', {
        data: {
            email: 'duplicate@example.com',
            password: 'password123'
        }
    });
    const response = await request.post('/api/users', {
        data: {
            email: 'duplicate@example.com',
            password: 'password123'
        }
    });
    expect(response.status()).toBe(400);
});

test('should log in successfully and return a token', async ({ request }) => {
    await request.post('/api/users', {
        data: {
            email: 'login@example.com',
            password: 'password123'
        }
    });
    const response = await request.post('/api/login', {
        data: {
            email: 'login@example.com',
            password: 'password123'
        }
    });
    expect(response.status()).toBe(200);
    const responseBody = await response.json();
    expect(responseBody).toHaveProperty('token');
});

test('should fail to log in with incorrect password', async ({ request }) => {
    const response = await request.post('/api/login', {
        data: {
            email: 'login@example.com',
            password: 'wrongpassword'
        }
    });
    expect(response.status()).toBe(401);
});

test('should fail to log in with non-existent email', async ({ request }) => {
    const response = await request.post('/api/login', {
        data: {
            email: 'nonexistent@example.com',
            password: 'password123'
        }
    });
    expect(response.status()).toBe(401);
});